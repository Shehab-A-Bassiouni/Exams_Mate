// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Examination_System.StoredProcModel;

public partial class ITI_Exam_SystemContext : DbContext
{
    public ITI_Exam_SystemContext()
    {
    }

    public ITI_Exam_SystemContext(DbContextOptions<ITI_Exam_SystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<QuestionsBank> QuestionsBanks { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentAnswer> StudentAnswers { get; set; }

    public virtual DbSet<StudentAnswerV2> StudentAnswerV2s { get; set; }

    public virtual DbSet<StudentCourse> StudentCourses { get; set; }

    public virtual DbSet<StudentExamAnswer> StudentExamAnswers { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ITI_Exam_System;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.AnsId).HasName("PK_answer_id");

            entity.ToTable("answers");

            entity.Property(e => e.AnsId).HasColumnName("ans_id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("content");
            entity.Property(e => e.IsCorrect).HasColumnName("isCorrect");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.Answers)
                .HasForeignKey(d => d.QuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ans_questions");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CrsId).HasName("PK_course_id");

            entity.ToTable("courses");

            entity.Property(e => e.CrsId).HasColumnName("crs_id");
            entity.Property(e => e.CrsName)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("crs_name");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.State)
                .HasMaxLength(10)
                .HasColumnName("state");
            entity.Property(e => e.TotalGrade).HasColumnName("total_grade");

            entity.HasMany(d => d.Depts).WithMany(p => p.Crs)
                .UsingEntity<Dictionary<string, object>>(
                    "DepartmentCourse",
                    r => r.HasOne<Department>().WithMany()
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_dept_crs_stdid"),
                    l => l.HasOne<Course>().WithMany()
                        .HasForeignKey("CrsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_dept_crs_crsid"),
                    j =>
                    {
                        j.HasKey("CrsId", "DeptId");
                        j.ToTable("department_course");
                        j.IndexerProperty<int>("CrsId").HasColumnName("crs_id");
                        j.IndexerProperty<int>("DeptId").HasColumnName("dept_id");
                    });

            entity.HasMany(d => d.Ins).WithMany(p => p.Crs)
                .UsingEntity<Dictionary<string, object>>(
                    "InstructorCourse",
                    r => r.HasOne<Instructor>().WithMany()
                        .HasForeignKey("InsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_ins_crs_insid"),
                    l => l.HasOne<Course>().WithMany()
                        .HasForeignKey("CrsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_ins_crs_crsid"),
                    j =>
                    {
                        j.HasKey("CrsId", "InsId");
                        j.ToTable("instructor_course");
                        j.IndexerProperty<int>("CrsId").HasColumnName("crs_id");
                        j.IndexerProperty<int>("InsId").HasColumnName("ins_id");
                    });
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DeptId).HasName("PK_department_id");

            entity.ToTable("departments");

            entity.Property(e => e.DeptId).HasColumnName("dept_id");
            entity.Property(e => e.DeptName)
                .IsRequired()
                .HasMaxLength(15)
                .HasColumnName("dept_name");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.MgrId).HasColumnName("mgr_id");

            entity.HasOne(d => d.Mgr).WithMany(p => p.Departments)
                .HasForeignKey(d => d.MgrId)
                .HasConstraintName("fk_dept_mgr");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.ExamNo).HasName("pk_exam_no");

            entity.ToTable("exams");

            entity.Property(e => e.ExamNo)
                .ValueGeneratedNever()
                .HasColumnName("exam_no");
            entity.Property(e => e.CrsId).HasColumnName("crs_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.GenerationDate)
                .HasColumnType("datetime")
                .HasColumnName("generation_date");
            entity.Property(e => e.InsId).HasColumnName("ins_id");
            entity.Property(e => e.PassingGrade).HasColumnName("passing_grade");
            entity.Property(e => e.State)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("state");

            entity.HasOne(d => d.Crs).WithMany(p => p.Exams)
                .HasForeignKey(d => d.CrsId)
                .HasConstraintName("fk_exam_crs");

            entity.HasOne(d => d.Ins).WithMany(p => p.Exams)
                .HasForeignKey(d => d.InsId)
                .HasConstraintName("fk_exam_ins");

            entity.HasMany(d => d.Questions).WithMany(p => p.ExamNos)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamQuestion",
                    r => r.HasOne<QuestionsBank>().WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_examQuestions_questionsId"),
                    l => l.HasOne<Exam>().WithMany()
                        .HasForeignKey("ExamNo")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_examQuestions_examNo"),
                    j =>
                    {
                        j.HasKey("ExamNo", "QuestionId");
                        j.ToTable("exam_questions");
                        j.IndexerProperty<int>("ExamNo").HasColumnName("exam_no");
                        j.IndexerProperty<int>("QuestionId").HasColumnName("question_id");
                    });
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.InsId).HasName("PK_instructor_id");

            entity.ToTable("instructors");

            entity.Property(e => e.InsId).HasColumnName("ins_id");
            entity.Property(e => e.DeptId).HasColumnName("dept_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fname).HasMaxLength(10);
            entity.Property(e => e.HireDate)
                .HasColumnType("datetime")
                .HasColumnName("hire_date");
            entity.Property(e => e.Lname).HasMaxLength(10);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .HasColumnName("phone");
            entity.Property(e => e.ProfilPicture)
                .HasMaxLength(50)
                .HasColumnName("profil_picture");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Dept).WithMany(p => p.Instructors)
                .HasForeignKey(d => d.DeptId)
                .HasConstraintName("fk_ins_dept");

            entity.HasOne(d => d.User).WithMany(p => p.Instructors)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("fk_ins_users");
        });

        modelBuilder.Entity<QuestionsBank>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK_question_id");

            entity.ToTable("questions_bank");

            entity.Property(e => e.QuestionId).HasColumnName("question_id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("content");
            entity.Property(e => e.CrsId).HasColumnName("crs_id");
            entity.Property(e => e.Points).HasColumnName("points");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("type");

            entity.HasOne(d => d.Crs).WithMany(p => p.QuestionsBanks)
                .HasForeignKey(d => d.CrsId)
                .HasConstraintName("fk_questions_crs");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.StdId).HasName("PK_student_id");

            entity.ToTable("students");

            entity.Property(e => e.StdId).HasColumnName("std_id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.DeptId).HasColumnName("dept_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fname).HasMaxLength(10);
            entity.Property(e => e.JoinDate)
                .HasColumnType("datetime")
                .HasColumnName("join_date");
            entity.Property(e => e.Lname).HasMaxLength(10);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .HasColumnName("phone");
            entity.Property(e => e.ProfilPicture)
                .HasMaxLength(50)
                .HasColumnName("profil_picture");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Dept).WithMany(p => p.Students)
                .HasForeignKey(d => d.DeptId)
                .HasConstraintName("fk_std_dept");

            entity.HasOne(d => d.User).WithMany(p => p.Students)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("fk_std_users");
        });

        modelBuilder.Entity<StudentAnswer>(entity =>
        {
            entity.HasKey(e => e.StdAnsId).HasName("PK__student___6506611D0D0BBB2F");

            entity.ToTable("student_answers");

            entity.Property(e => e.StdAnsId).HasColumnName("Std_Ans_Id");
            entity.Property(e => e.StudentChoices)
                .HasMaxLength(50)
                .HasColumnName("student_choices");
        });

        modelBuilder.Entity<StudentAnswerV2>(entity =>
        {
            entity.HasKey(e => e.StdAnsId).HasName("PK__Student___6506611D993F58D5");

            entity.ToTable("Student_answerV2");

            entity.Property(e => e.StdAnsId).HasColumnName("Std_Ans_Id");
            entity.Property(e => e.StudentAns)
                .HasMaxLength(20)
                .HasColumnName("Student_Ans");
        });

        modelBuilder.Entity<StudentCourse>(entity =>
        {
            entity.HasKey(e => new { e.CrsId, e.StdId });

            entity.ToTable("student_course");

            entity.Property(e => e.CrsId).HasColumnName("crs_id");
            entity.Property(e => e.StdId).HasColumnName("std_id");
            entity.Property(e => e.CrsGrade).HasColumnName("Crs_Grade");

            entity.HasOne(d => d.Crs).WithMany(p => p.StudentCourses)
                .HasForeignKey(d => d.CrsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_std_crs_crsid");

            entity.HasOne(d => d.Std).WithMany(p => p.StudentCourses)
                .HasForeignKey(d => d.StdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_std_crs_stdid");
        });

        modelBuilder.Entity<StudentExamAnswer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("student_exam_answers");

            entity.Property(e => e.Examid).HasColumnName("examid");
            entity.Property(e => e.Grades)
                .HasDefaultValueSql("((0))")
                .HasColumnName("grades");
            entity.Property(e => e.QuesId).HasColumnName("Ques_ID");
            entity.Property(e => e.StdAnsId).HasColumnName("Std_Ans_Id");
            entity.Property(e => e.Stdid).HasColumnName("stdid");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => new { e.CrsId, e.Topic1 }).HasName("PK__Topics__A0B11F2CD48982D7");

            entity.Property(e => e.Topic1)
                .HasMaxLength(50)
                .HasColumnName("Topic");

            entity.HasOne(d => d.Crs).WithMany(p => p.Topics)
                .HasForeignKey(d => d.CrsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Fk_CrsId");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_user_id");

            entity.ToTable("users");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastLogin)
                .HasColumnType("datetime")
                .HasColumnName("Last_Login");
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserPassword)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("user_password");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("username");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}